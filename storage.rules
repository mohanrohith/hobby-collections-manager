rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    // User's item images
    match /users/{userId}/items/{itemId}/{imageId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidImage();
      allow update: if isOwner(userId) && isValidImage();
      allow delete: if isOwner(userId);
    }

    // User's profile images
    match /users/{userId}/profile/{imageId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidImage();
      allow update: if isOwner(userId) && isValidImage();
      allow delete: if isOwner(userId);
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
} 